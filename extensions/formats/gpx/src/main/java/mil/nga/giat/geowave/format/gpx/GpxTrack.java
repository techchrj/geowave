/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package mil.nga.giat.geowave.format.gpx;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class GpxTrack extends
		org.apache.avro.specific.SpecificRecordBase implements
		org.apache.avro.specific.SpecificRecord
{
	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
			.parse("{\"type\":\"record\",\"name\":\"GpxTrack\",\"namespace\":\"mil.nga.giat.geowave.types.gpx\",\"fields\":[{\"name\":\"trackid\",\"type\":[\"long\",\"null\"],\"doc\":\"unique id for track\"},{\"name\":\"timestamp\",\"type\":[\"long\",\"null\"],\"doc\":\"timestamp from metadata directory\"},{\"name\":\"gpxfile\",\"type\":\"bytes\",\"doc\":\"Original GPX file\"},{\"name\":\"points\",\"type\":[\"long\",\"null\"],\"doc\":\"number of points from metadata\"},{\"name\":\"visibility\",\"type\":[\"string\",\"null\"],\"doc\":\"visibility setting data was uploaded as from metadata\"},{\"name\":\"user\",\"type\":[\"string\",\"null\"],\"doc\":\"user who uploaded the file from metadata\"},{\"name\":\"userid\",\"type\":[\"long\",\"null\"],\"doc\":\"id of user who uploaded the data from metadata\"},{\"name\":\"description\",\"type\":[\"string\",\"null\"],\"doc\":\"description from metadata\"},{\"name\":\"tags\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":\"null\"}],\"doc:\":\"Stores GPX Track files, and, if available metadata blobs per OSM practice\"}");

	public static org.apache.avro.Schema getClassSchema() {
		return SCHEMA$;
	}

	/** unique id for track */
	@Deprecated
	public java.lang.Long trackid;
	/** timestamp from metadata directory */
	@Deprecated
	public java.lang.Long timestamp;
	/** Original GPX file */
	@Deprecated
	public java.nio.ByteBuffer gpxfile;
	/** number of points from metadata */
	@Deprecated
	public java.lang.Long points;
	/** visibility setting data was uploaded as from metadata */
	@Deprecated
	public java.lang.CharSequence visibility;
	/** user who uploaded the file from metadata */
	@Deprecated
	public java.lang.CharSequence user;
	/** id of user who uploaded the data from metadata */
	@Deprecated
	public java.lang.Long userid;
	/** description from metadata */
	@Deprecated
	public java.lang.CharSequence description;
	@Deprecated
	public java.util.List<java.lang.CharSequence> tags;

	/**
	 * Default constructor. Note that this does not initialize fields to their
	 * default values from the schema. If that is desired then one should use
	 * <code>newBuilder()</code>.
	 */
	public GpxTrack() {}

	/**
	 * All-args constructor.
	 */
	public GpxTrack(
			java.lang.Long trackid,
			java.lang.Long timestamp,
			java.nio.ByteBuffer gpxfile,
			java.lang.Long points,
			java.lang.CharSequence visibility,
			java.lang.CharSequence user,
			java.lang.Long userid,
			java.lang.CharSequence description,
			java.util.List<java.lang.CharSequence> tags ) {
		this.trackid = trackid;
		this.timestamp = timestamp;
		this.gpxfile = gpxfile;
		this.points = points;
		this.visibility = visibility;
		this.user = user;
		this.userid = userid;
		this.description = description;
		this.tags = tags;
	}

	public org.apache.avro.Schema getSchema() {
		return SCHEMA$;
	}

	// Used by DatumWriter. Applications should not call.
	public java.lang.Object get(
			int field$ ) {
		switch (field$) {
			case 0:
				return trackid;
			case 1:
				return timestamp;
			case 2:
				return gpxfile;
			case 3:
				return points;
			case 4:
				return visibility;
			case 5:
				return user;
			case 6:
				return userid;
			case 7:
				return description;
			case 8:
				return tags;
			default:
				throw new org.apache.avro.AvroRuntimeException(
						"Bad index");
		}
	}

	// Used by DatumReader. Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(
			int field$,
			java.lang.Object value$ ) {
		switch (field$) {
			case 0:
				trackid = (java.lang.Long) value$;
				break;
			case 1:
				timestamp = (java.lang.Long) value$;
				break;
			case 2:
				gpxfile = (java.nio.ByteBuffer) value$;
				break;
			case 3:
				points = (java.lang.Long) value$;
				break;
			case 4:
				visibility = (java.lang.CharSequence) value$;
				break;
			case 5:
				user = (java.lang.CharSequence) value$;
				break;
			case 6:
				userid = (java.lang.Long) value$;
				break;
			case 7:
				description = (java.lang.CharSequence) value$;
				break;
			case 8:
				tags = (java.util.List<java.lang.CharSequence>) value$;
				break;
			default:
				throw new org.apache.avro.AvroRuntimeException(
						"Bad index");
		}
	}

	/**
	 * Gets the value of the 'trackid' field. unique id for track
	 */
	public java.lang.Long getTrackid() {
		return trackid;
	}

	/**
	 * Sets the value of the 'trackid' field. unique id for track * @param value
	 * the value to set.
	 */
	public void setTrackid(
			java.lang.Long value ) {
		this.trackid = value;
	}

	/**
	 * Gets the value of the 'timestamp' field. timestamp from metadata
	 * directory
	 */
	public java.lang.Long getTimestamp() {
		return timestamp;
	}

	/**
	 * Sets the value of the 'timestamp' field. timestamp from metadata
	 * directory * @param value the value to set.
	 */
	public void setTimestamp(
			java.lang.Long value ) {
		this.timestamp = value;
	}

	/**
	 * Gets the value of the 'gpxfile' field. Original GPX file
	 */
	public java.nio.ByteBuffer getGpxfile() {
		return gpxfile;
	}

	/**
	 * Sets the value of the 'gpxfile' field. Original GPX file * @param value
	 * the value to set.
	 */
	public void setGpxfile(
			java.nio.ByteBuffer value ) {
		this.gpxfile = value;
	}

	/**
	 * Gets the value of the 'points' field. number of points from metadata
	 */
	public java.lang.Long getPoints() {
		return points;
	}

	/**
	 * Sets the value of the 'points' field. number of points from metadata * @param
	 * value the value to set.
	 */
	public void setPoints(
			java.lang.Long value ) {
		this.points = value;
	}

	/**
	 * Gets the value of the 'visibility' field. visibility setting data was
	 * uploaded as from metadata
	 */
	public java.lang.CharSequence getVisibility() {
		return visibility;
	}

	/**
	 * Sets the value of the 'visibility' field. visibility setting data was
	 * uploaded as from metadata * @param value the value to set.
	 */
	public void setVisibility(
			java.lang.CharSequence value ) {
		this.visibility = value;
	}

	/**
	 * Gets the value of the 'user' field. user who uploaded the file from
	 * metadata
	 */
	public java.lang.CharSequence getUser() {
		return user;
	}

	/**
	 * Sets the value of the 'user' field. user who uploaded the file from
	 * metadata * @param value the value to set.
	 */
	public void setUser(
			java.lang.CharSequence value ) {
		this.user = value;
	}

	/**
	 * Gets the value of the 'userid' field. id of user who uploaded the data
	 * from metadata
	 */
	public java.lang.Long getUserid() {
		return userid;
	}

	/**
	 * Sets the value of the 'userid' field. id of user who uploaded the data
	 * from metadata * @param value the value to set.
	 */
	public void setUserid(
			java.lang.Long value ) {
		this.userid = value;
	}

	/**
	 * Gets the value of the 'description' field. description from metadata
	 */
	public java.lang.CharSequence getDescription() {
		return description;
	}

	/**
	 * Sets the value of the 'description' field. description from metadata * @param
	 * value the value to set.
	 */
	public void setDescription(
			java.lang.CharSequence value ) {
		this.description = value;
	}

	/**
	 * Gets the value of the 'tags' field.
	 */
	public java.util.List<java.lang.CharSequence> getTags() {
		return tags;
	}

	/**
	 * Sets the value of the 'tags' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setTags(
			java.util.List<java.lang.CharSequence> value ) {
		this.tags = value;
	}

	/** Creates a new GpxTrack RecordBuilder */
	public static mil.nga.giat.geowave.format.gpx.GpxTrack.Builder newBuilder() {
		return new mil.nga.giat.geowave.format.gpx.GpxTrack.Builder();
	}

	/** Creates a new GpxTrack RecordBuilder by copying an existing Builder */
	public static mil.nga.giat.geowave.format.gpx.GpxTrack.Builder newBuilder(
			mil.nga.giat.geowave.format.gpx.GpxTrack.Builder other ) {
		return new mil.nga.giat.geowave.format.gpx.GpxTrack.Builder(
				other);
	}

	/**
	 * Creates a new GpxTrack RecordBuilder by copying an existing GpxTrack
	 * instance
	 */
	public static mil.nga.giat.geowave.format.gpx.GpxTrack.Builder newBuilder(
			mil.nga.giat.geowave.format.gpx.GpxTrack other ) {
		return new mil.nga.giat.geowave.format.gpx.GpxTrack.Builder(
				other);
	}

	/**
	 * RecordBuilder for GpxTrack instances.
	 */
	public static class Builder extends
			org.apache.avro.specific.SpecificRecordBuilderBase<GpxTrack> implements
			org.apache.avro.data.RecordBuilder<GpxTrack>
	{

		private java.lang.Long trackid;
		private java.lang.Long timestamp;
		private java.nio.ByteBuffer gpxfile;
		private java.lang.Long points;
		private java.lang.CharSequence visibility;
		private java.lang.CharSequence user;
		private java.lang.Long userid;
		private java.lang.CharSequence description;
		private java.util.List<java.lang.CharSequence> tags;

		/** Creates a new Builder */
		private Builder() {
			super(
					mil.nga.giat.geowave.format.gpx.GpxTrack.SCHEMA$);
		}

		/** Creates a Builder by copying an existing Builder */
		private Builder(
				mil.nga.giat.geowave.format.gpx.GpxTrack.Builder other ) {
			super(
					other);
			if (isValidValue(
					fields()[0],
					other.trackid)) {
				this.trackid = data().deepCopy(
						fields()[0].schema(),
						other.trackid);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(
					fields()[1],
					other.timestamp)) {
				this.timestamp = data().deepCopy(
						fields()[1].schema(),
						other.timestamp);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(
					fields()[2],
					other.gpxfile)) {
				this.gpxfile = data().deepCopy(
						fields()[2].schema(),
						other.gpxfile);
				fieldSetFlags()[2] = true;
			}
			if (isValidValue(
					fields()[3],
					other.points)) {
				this.points = data().deepCopy(
						fields()[3].schema(),
						other.points);
				fieldSetFlags()[3] = true;
			}
			if (isValidValue(
					fields()[4],
					other.visibility)) {
				this.visibility = data().deepCopy(
						fields()[4].schema(),
						other.visibility);
				fieldSetFlags()[4] = true;
			}
			if (isValidValue(
					fields()[5],
					other.user)) {
				this.user = data().deepCopy(
						fields()[5].schema(),
						other.user);
				fieldSetFlags()[5] = true;
			}
			if (isValidValue(
					fields()[6],
					other.userid)) {
				this.userid = data().deepCopy(
						fields()[6].schema(),
						other.userid);
				fieldSetFlags()[6] = true;
			}
			if (isValidValue(
					fields()[7],
					other.description)) {
				this.description = data().deepCopy(
						fields()[7].schema(),
						other.description);
				fieldSetFlags()[7] = true;
			}
			if (isValidValue(
					fields()[8],
					other.tags)) {
				this.tags = data().deepCopy(
						fields()[8].schema(),
						other.tags);
				fieldSetFlags()[8] = true;
			}
		}

		/** Creates a Builder by copying an existing GpxTrack instance */
		private Builder(
				mil.nga.giat.geowave.format.gpx.GpxTrack other ) {
			super(
					mil.nga.giat.geowave.format.gpx.GpxTrack.SCHEMA$);
			if (isValidValue(
					fields()[0],
					other.trackid)) {
				this.trackid = data().deepCopy(
						fields()[0].schema(),
						other.trackid);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(
					fields()[1],
					other.timestamp)) {
				this.timestamp = data().deepCopy(
						fields()[1].schema(),
						other.timestamp);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(
					fields()[2],
					other.gpxfile)) {
				this.gpxfile = data().deepCopy(
						fields()[2].schema(),
						other.gpxfile);
				fieldSetFlags()[2] = true;
			}
			if (isValidValue(
					fields()[3],
					other.points)) {
				this.points = data().deepCopy(
						fields()[3].schema(),
						other.points);
				fieldSetFlags()[3] = true;
			}
			if (isValidValue(
					fields()[4],
					other.visibility)) {
				this.visibility = data().deepCopy(
						fields()[4].schema(),
						other.visibility);
				fieldSetFlags()[4] = true;
			}
			if (isValidValue(
					fields()[5],
					other.user)) {
				this.user = data().deepCopy(
						fields()[5].schema(),
						other.user);
				fieldSetFlags()[5] = true;
			}
			if (isValidValue(
					fields()[6],
					other.userid)) {
				this.userid = data().deepCopy(
						fields()[6].schema(),
						other.userid);
				fieldSetFlags()[6] = true;
			}
			if (isValidValue(
					fields()[7],
					other.description)) {
				this.description = data().deepCopy(
						fields()[7].schema(),
						other.description);
				fieldSetFlags()[7] = true;
			}
			if (isValidValue(
					fields()[8],
					other.tags)) {
				this.tags = data().deepCopy(
						fields()[8].schema(),
						other.tags);
				fieldSetFlags()[8] = true;
			}
		}

		/** Gets the value of the 'trackid' field */
		public java.lang.Long getTrackid() {
			return trackid;
		}

		/** Sets the value of the 'trackid' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder setTrackid(
				java.lang.Long value ) {
			validate(
					fields()[0],
					value);
			this.trackid = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/** Checks whether the 'trackid' field has been set */
		public boolean hasTrackid() {
			return fieldSetFlags()[0];
		}

		/** Clears the value of the 'trackid' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder clearTrackid() {
			trackid = null;
			fieldSetFlags()[0] = false;
			return this;
		}

		/** Gets the value of the 'timestamp' field */
		public java.lang.Long getTimestamp() {
			return timestamp;
		}

		/** Sets the value of the 'timestamp' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder setTimestamp(
				java.lang.Long value ) {
			validate(
					fields()[1],
					value);
			this.timestamp = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/** Checks whether the 'timestamp' field has been set */
		public boolean hasTimestamp() {
			return fieldSetFlags()[1];
		}

		/** Clears the value of the 'timestamp' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder clearTimestamp() {
			timestamp = null;
			fieldSetFlags()[1] = false;
			return this;
		}

		/** Gets the value of the 'gpxfile' field */
		public java.nio.ByteBuffer getGpxfile() {
			return gpxfile;
		}

		/** Sets the value of the 'gpxfile' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder setGpxfile(
				java.nio.ByteBuffer value ) {
			validate(
					fields()[2],
					value);
			this.gpxfile = value;
			fieldSetFlags()[2] = true;
			return this;
		}

		/** Checks whether the 'gpxfile' field has been set */
		public boolean hasGpxfile() {
			return fieldSetFlags()[2];
		}

		/** Clears the value of the 'gpxfile' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder clearGpxfile() {
			gpxfile = null;
			fieldSetFlags()[2] = false;
			return this;
		}

		/** Gets the value of the 'points' field */
		public java.lang.Long getPoints() {
			return points;
		}

		/** Sets the value of the 'points' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder setPoints(
				java.lang.Long value ) {
			validate(
					fields()[3],
					value);
			this.points = value;
			fieldSetFlags()[3] = true;
			return this;
		}

		/** Checks whether the 'points' field has been set */
		public boolean hasPoints() {
			return fieldSetFlags()[3];
		}

		/** Clears the value of the 'points' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder clearPoints() {
			points = null;
			fieldSetFlags()[3] = false;
			return this;
		}

		/** Gets the value of the 'visibility' field */
		public java.lang.CharSequence getVisibility() {
			return visibility;
		}

		/** Sets the value of the 'visibility' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder setVisibility(
				java.lang.CharSequence value ) {
			validate(
					fields()[4],
					value);
			this.visibility = value;
			fieldSetFlags()[4] = true;
			return this;
		}

		/** Checks whether the 'visibility' field has been set */
		public boolean hasVisibility() {
			return fieldSetFlags()[4];
		}

		/** Clears the value of the 'visibility' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder clearVisibility() {
			visibility = null;
			fieldSetFlags()[4] = false;
			return this;
		}

		/** Gets the value of the 'user' field */
		public java.lang.CharSequence getUser() {
			return user;
		}

		/** Sets the value of the 'user' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder setUser(
				java.lang.CharSequence value ) {
			validate(
					fields()[5],
					value);
			this.user = value;
			fieldSetFlags()[5] = true;
			return this;
		}

		/** Checks whether the 'user' field has been set */
		public boolean hasUser() {
			return fieldSetFlags()[5];
		}

		/** Clears the value of the 'user' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder clearUser() {
			user = null;
			fieldSetFlags()[5] = false;
			return this;
		}

		/** Gets the value of the 'userid' field */
		public java.lang.Long getUserid() {
			return userid;
		}

		/** Sets the value of the 'userid' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder setUserid(
				java.lang.Long value ) {
			validate(
					fields()[6],
					value);
			this.userid = value;
			fieldSetFlags()[6] = true;
			return this;
		}

		/** Checks whether the 'userid' field has been set */
		public boolean hasUserid() {
			return fieldSetFlags()[6];
		}

		/** Clears the value of the 'userid' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder clearUserid() {
			userid = null;
			fieldSetFlags()[6] = false;
			return this;
		}

		/** Gets the value of the 'description' field */
		public java.lang.CharSequence getDescription() {
			return description;
		}

		/** Sets the value of the 'description' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder setDescription(
				java.lang.CharSequence value ) {
			validate(
					fields()[7],
					value);
			this.description = value;
			fieldSetFlags()[7] = true;
			return this;
		}

		/** Checks whether the 'description' field has been set */
		public boolean hasDescription() {
			return fieldSetFlags()[7];
		}

		/** Clears the value of the 'description' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder clearDescription() {
			description = null;
			fieldSetFlags()[7] = false;
			return this;
		}

		/** Gets the value of the 'tags' field */
		public java.util.List<java.lang.CharSequence> getTags() {
			return tags;
		}

		/** Sets the value of the 'tags' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder setTags(
				java.util.List<java.lang.CharSequence> value ) {
			validate(
					fields()[8],
					value);
			this.tags = value;
			fieldSetFlags()[8] = true;
			return this;
		}

		/** Checks whether the 'tags' field has been set */
		public boolean hasTags() {
			return fieldSetFlags()[8];
		}

		/** Clears the value of the 'tags' field */
		public mil.nga.giat.geowave.format.gpx.GpxTrack.Builder clearTags() {
			tags = null;
			fieldSetFlags()[8] = false;
			return this;
		}

		@Override
		public GpxTrack build() {
			try {
				GpxTrack record = new GpxTrack();
				record.trackid = fieldSetFlags()[0] ? this.trackid : (java.lang.Long) defaultValue(fields()[0]);
				record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.Long) defaultValue(fields()[1]);
				record.gpxfile = fieldSetFlags()[2] ? this.gpxfile : (java.nio.ByteBuffer) defaultValue(fields()[2]);
				record.points = fieldSetFlags()[3] ? this.points : (java.lang.Long) defaultValue(fields()[3]);
				record.visibility = fieldSetFlags()[4] ? this.visibility : (java.lang.CharSequence) defaultValue(fields()[4]);
				record.user = fieldSetFlags()[5] ? this.user : (java.lang.CharSequence) defaultValue(fields()[5]);
				record.userid = fieldSetFlags()[6] ? this.userid : (java.lang.Long) defaultValue(fields()[6]);
				record.description = fieldSetFlags()[7] ? this.description : (java.lang.CharSequence) defaultValue(fields()[7]);
				record.tags = fieldSetFlags()[8] ? this.tags : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[8]);
				return record;
			}
			catch (Exception e) {
				throw new org.apache.avro.AvroRuntimeException(
						e);
			}
		}
	}
}
