/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package mil.nga.giat.geowave.format.tdrive;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TdrivePoint extends
		org.apache.avro.specific.SpecificRecordBase implements
		org.apache.avro.specific.SpecificRecord
{
	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TdrivePoint\",\"namespace\":\"mil.nga.giat.geowave.types.tdrive\",\"fields\":[{\"name\":\"taxiid\",\"type\":\"int\",\"doc\":\"unique id for a taxi\"},{\"name\":\"pointinstance\",\"type\":\"long\",\"doc\":\"point index in series\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"timestamp of event\"},{\"name\":\"latitude\",\"type\":\"double\",\"doc\":\"lattitude of taxi point event\"},{\"name\":\"longitude\",\"type\":\"double\",\"doc\":\"longitude of taxi point event\"}],\"doc:\":\"Stores GPX Track files, and, if available metadata blobs per OSM practice\"}");

	public static org.apache.avro.Schema getClassSchema() {
		return SCHEMA$;
	}

	/** unique id for a taxi */
	@Deprecated
	public int taxiid;
	/** point index in series */
	@Deprecated
	public long pointinstance;
	/** timestamp of event */
	@Deprecated
	public long timestamp;
	/** lattitude of taxi point event */
	@Deprecated
	public double latitude;
	/** longitude of taxi point event */
	@Deprecated
	public double longitude;

	/**
	 * Default constructor. Note that this does not initialize fields to their
	 * default values from the schema. If that is desired then one should use
	 * <code>newBuilder()</code>.
	 */
	public TdrivePoint() {}

	/**
	 * All-args constructor.
	 */
	public TdrivePoint(
			java.lang.Integer taxiid,
			java.lang.Long pointinstance,
			java.lang.Long timestamp,
			java.lang.Double latitude,
			java.lang.Double longitude ) {
		this.taxiid = taxiid;
		this.pointinstance = pointinstance;
		this.timestamp = timestamp;
		this.latitude = latitude;
		this.longitude = longitude;
	}

	public org.apache.avro.Schema getSchema() {
		return SCHEMA$;
	}

	// Used by DatumWriter. Applications should not call.
	public java.lang.Object get(
			int field$ ) {
		switch (field$) {
			case 0:
				return taxiid;
			case 1:
				return pointinstance;
			case 2:
				return timestamp;
			case 3:
				return latitude;
			case 4:
				return longitude;
			default:
				throw new org.apache.avro.AvroRuntimeException(
						"Bad index");
		}
	}

	// Used by DatumReader. Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(
			int field$,
			java.lang.Object value$ ) {
		switch (field$) {
			case 0:
				taxiid = (java.lang.Integer) value$;
				break;
			case 1:
				pointinstance = (java.lang.Long) value$;
				break;
			case 2:
				timestamp = (java.lang.Long) value$;
				break;
			case 3:
				latitude = (java.lang.Double) value$;
				break;
			case 4:
				longitude = (java.lang.Double) value$;
				break;
			default:
				throw new org.apache.avro.AvroRuntimeException(
						"Bad index");
		}
	}

	/**
	 * Gets the value of the 'taxiid' field. unique id for a taxi
	 */
	public java.lang.Integer getTaxiid() {
		return taxiid;
	}

	/**
	 * Sets the value of the 'taxiid' field. unique id for a taxi * @param value
	 * the value to set.
	 */
	public void setTaxiid(
			java.lang.Integer value ) {
		this.taxiid = value;
	}

	/**
	 * Gets the value of the 'pointinstance' field. point index in series
	 */
	public java.lang.Long getPointinstance() {
		return pointinstance;
	}

	/**
	 * Sets the value of the 'pointinstance' field. point index in series * @param
	 * value the value to set.
	 */
	public void setPointinstance(
			java.lang.Long value ) {
		this.pointinstance = value;
	}

	/**
	 * Gets the value of the 'timestamp' field. timestamp of event
	 */
	public java.lang.Long getTimestamp() {
		return timestamp;
	}

	/**
	 * Sets the value of the 'timestamp' field. timestamp of event * @param
	 * value the value to set.
	 */
	public void setTimestamp(
			java.lang.Long value ) {
		this.timestamp = value;
	}

	/**
	 * Gets the value of the 'latitude' field. lattitude of taxi point event
	 */
	public java.lang.Double getLatitude() {
		return latitude;
	}

	/**
	 * Sets the value of the 'latitude' field. lattitude of taxi point event * @param
	 * value the value to set.
	 */
	public void setLatitude(
			java.lang.Double value ) {
		this.latitude = value;
	}

	/**
	 * Gets the value of the 'longitude' field. longitude of taxi point event
	 */
	public java.lang.Double getLongitude() {
		return longitude;
	}

	/**
	 * Sets the value of the 'longitude' field. longitude of taxi point event * @param
	 * value the value to set.
	 */
	public void setLongitude(
			java.lang.Double value ) {
		this.longitude = value;
	}

	/** Creates a new TdrivePoint RecordBuilder */
	public static mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder newBuilder() {
		return new mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder();
	}

	/** Creates a new TdrivePoint RecordBuilder by copying an existing Builder */
	public static mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder newBuilder(
			mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder other ) {
		return new mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder(
				other);
	}

	/**
	 * Creates a new TdrivePoint RecordBuilder by copying an existing
	 * TdrivePoint instance
	 */
	public static mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder newBuilder(
			mil.nga.giat.geowave.format.tdrive.TdrivePoint other ) {
		return new mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder(
				other);
	}

	/**
	 * RecordBuilder for TdrivePoint instances.
	 */
	public static class Builder extends
			org.apache.avro.specific.SpecificRecordBuilderBase<TdrivePoint> implements
			org.apache.avro.data.RecordBuilder<TdrivePoint>
	{

		private int taxiid;
		private long pointinstance;
		private long timestamp;
		private double latitude;
		private double longitude;

		/** Creates a new Builder */
		private Builder() {
			super(
					mil.nga.giat.geowave.format.tdrive.TdrivePoint.SCHEMA$);
		}

		/** Creates a Builder by copying an existing Builder */
		private Builder(
				mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder other ) {
			super(
					other);
			if (isValidValue(
					fields()[0],
					other.taxiid)) {
				this.taxiid = data().deepCopy(
						fields()[0].schema(),
						other.taxiid);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(
					fields()[1],
					other.pointinstance)) {
				this.pointinstance = data().deepCopy(
						fields()[1].schema(),
						other.pointinstance);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(
					fields()[2],
					other.timestamp)) {
				this.timestamp = data().deepCopy(
						fields()[2].schema(),
						other.timestamp);
				fieldSetFlags()[2] = true;
			}
			if (isValidValue(
					fields()[3],
					other.latitude)) {
				this.latitude = data().deepCopy(
						fields()[3].schema(),
						other.latitude);
				fieldSetFlags()[3] = true;
			}
			if (isValidValue(
					fields()[4],
					other.longitude)) {
				this.longitude = data().deepCopy(
						fields()[4].schema(),
						other.longitude);
				fieldSetFlags()[4] = true;
			}
		}

		/** Creates a Builder by copying an existing TdrivePoint instance */
		private Builder(
				mil.nga.giat.geowave.format.tdrive.TdrivePoint other ) {
			super(
					mil.nga.giat.geowave.format.tdrive.TdrivePoint.SCHEMA$);
			if (isValidValue(
					fields()[0],
					other.taxiid)) {
				this.taxiid = data().deepCopy(
						fields()[0].schema(),
						other.taxiid);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(
					fields()[1],
					other.pointinstance)) {
				this.pointinstance = data().deepCopy(
						fields()[1].schema(),
						other.pointinstance);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(
					fields()[2],
					other.timestamp)) {
				this.timestamp = data().deepCopy(
						fields()[2].schema(),
						other.timestamp);
				fieldSetFlags()[2] = true;
			}
			if (isValidValue(
					fields()[3],
					other.latitude)) {
				this.latitude = data().deepCopy(
						fields()[3].schema(),
						other.latitude);
				fieldSetFlags()[3] = true;
			}
			if (isValidValue(
					fields()[4],
					other.longitude)) {
				this.longitude = data().deepCopy(
						fields()[4].schema(),
						other.longitude);
				fieldSetFlags()[4] = true;
			}
		}

		/** Gets the value of the 'taxiid' field */
		public java.lang.Integer getTaxiid() {
			return taxiid;
		}

		/** Sets the value of the 'taxiid' field */
		public mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder setTaxiid(
				int value ) {
			validate(
					fields()[0],
					value);
			this.taxiid = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/** Checks whether the 'taxiid' field has been set */
		public boolean hasTaxiid() {
			return fieldSetFlags()[0];
		}

		/** Clears the value of the 'taxiid' field */
		public mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder clearTaxiid() {
			fieldSetFlags()[0] = false;
			return this;
		}

		/** Gets the value of the 'pointinstance' field */
		public java.lang.Long getPointinstance() {
			return pointinstance;
		}

		/** Sets the value of the 'pointinstance' field */
		public mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder setPointinstance(
				long value ) {
			validate(
					fields()[1],
					value);
			this.pointinstance = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/** Checks whether the 'pointinstance' field has been set */
		public boolean hasPointinstance() {
			return fieldSetFlags()[1];
		}

		/** Clears the value of the 'pointinstance' field */
		public mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder clearPointinstance() {
			fieldSetFlags()[1] = false;
			return this;
		}

		/** Gets the value of the 'timestamp' field */
		public java.lang.Long getTimestamp() {
			return timestamp;
		}

		/** Sets the value of the 'timestamp' field */
		public mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder setTimestamp(
				long value ) {
			validate(
					fields()[2],
					value);
			this.timestamp = value;
			fieldSetFlags()[2] = true;
			return this;
		}

		/** Checks whether the 'timestamp' field has been set */
		public boolean hasTimestamp() {
			return fieldSetFlags()[2];
		}

		/** Clears the value of the 'timestamp' field */
		public mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder clearTimestamp() {
			fieldSetFlags()[2] = false;
			return this;
		}

		/** Gets the value of the 'latitude' field */
		public java.lang.Double getLatitude() {
			return latitude;
		}

		/** Sets the value of the 'latitude' field */
		public mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder setLatitude(
				double value ) {
			validate(
					fields()[3],
					value);
			this.latitude = value;
			fieldSetFlags()[3] = true;
			return this;
		}

		/** Checks whether the 'latitude' field has been set */
		public boolean hasLatitude() {
			return fieldSetFlags()[3];
		}

		/** Clears the value of the 'latitude' field */
		public mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder clearLatitude() {
			fieldSetFlags()[3] = false;
			return this;
		}

		/** Gets the value of the 'longitude' field */
		public java.lang.Double getLongitude() {
			return longitude;
		}

		/** Sets the value of the 'longitude' field */
		public mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder setLongitude(
				double value ) {
			validate(
					fields()[4],
					value);
			this.longitude = value;
			fieldSetFlags()[4] = true;
			return this;
		}

		/** Checks whether the 'longitude' field has been set */
		public boolean hasLongitude() {
			return fieldSetFlags()[4];
		}

		/** Clears the value of the 'longitude' field */
		public mil.nga.giat.geowave.format.tdrive.TdrivePoint.Builder clearLongitude() {
			fieldSetFlags()[4] = false;
			return this;
		}

		@Override
		public TdrivePoint build() {
			try {
				TdrivePoint record = new TdrivePoint();
				record.taxiid = fieldSetFlags()[0] ? this.taxiid : (java.lang.Integer) defaultValue(fields()[0]);
				record.pointinstance = fieldSetFlags()[1] ? this.pointinstance : (java.lang.Long) defaultValue(fields()[1]);
				record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
				record.latitude = fieldSetFlags()[3] ? this.latitude : (java.lang.Double) defaultValue(fields()[3]);
				record.longitude = fieldSetFlags()[4] ? this.longitude : (java.lang.Double) defaultValue(fields()[4]);
				return record;
			}
			catch (Exception e) {
				throw new org.apache.avro.AvroRuntimeException(
						e);
			}
		}
	}
}
